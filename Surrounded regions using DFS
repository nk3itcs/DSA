class Solution {
public:
    void dfs(int row,int col,vector<vector<int>> &vis,vector<vector<char>> board,int n,int m){
        vis[row][col]=1;
        int drow[]={-1,0,1,0};
        int dcol[]={0,1,0,-1};

        for(int k=0;k<4;k++){
            int nrow=row+drow[k];
            int ncol=col+dcol[k];

            if(nrow>=0 and nrow<n and ncol>=0 and ncol<m and vis[nrow][ncol]==0 and board[nrow][ncol]=='O'){
                dfs(nrow,ncol,vis,board,n,m);
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();

        vector<vector<int>> vis(n,vector<int>(m,0));
        

        for(int j=0;j<m;j++){

                if(vis[0][j]==0 and board[0][j]=='O')
                    dfs(0,j,vis,board,n,m);
                
                if(vis[n-1][j]==0 and board[n-1][j]=='O')
                     dfs(n-1,j,vis,board,n,m);
        }
        
        for(int i=0;i<n;i++){
                if(vis[i][0]==0 and board[i][0]=='O')
                    dfs(i,0,vis,board,n,m);

                if(vis[i][m-1]==0 and board[i][m-1]=='O'){
                    dfs(i,m-1,vis,board,n,m);

        }
        

        for(int p=0;p<n;p++){
            for(int q=0;q<m;q++){
                if(vis[p][q]==0 and board[p][q]=='O')
                    board[p][q]='X';
            }
        }


    }
    }
};
